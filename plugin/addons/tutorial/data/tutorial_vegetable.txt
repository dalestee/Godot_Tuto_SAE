Tutorial Vegetable Ninja
In this tutorial, you will learn how to create a Vegetable Ninja game, where players slice vegetables using their mouse and lose if they miss too many.

Project Setup, description
"Create a new Godot project", Scene
"Create a folder named 'scenes'", FileSystem
"Create a folder named 'scripts'", FileSystem
"Create a folder named 'assets' and place your vegetable images (carrot.png, carrot-half_1.png and carrot-half_2.png)", FileSystem

Create the Vegetable Scene, description
"Create a New 2D Scene", Scene
"Swape the root node to a RigidBody2D node (right click node -> change type)", Scene
"Rename it 'Vegetable'", Scene
"Add a Sprite2D as a child of 'Vegetable'", Scene
"Drag and drop the image of carrot to the texture section of Sprite2D", Inspector
"Add a CollisionShape2D as a child of 'Vegetable'", Scene
"Give it a circular shape", Inspector
"Add an Area2D as a child of 'Vegetable'", Scene
"Add a CollisionShape2D as a child of the 'Area2D'", Scene
"Give it a circular shape too", Inspector
"Go to the Node tab -> Groups, and add it to a group named 'vegetables'", Inspector
"Add a VisibleOnScreenNotifier2D as a child of 'Vegetable'", Scene
"Save the scene as 'vegetable.tscn' in the 'scenes' folder", Scene

Create the Sliced Vegetable Scene, description
"Create a New 2D Scene named sliced_vegetable", FileSystem
"Swape the root node to a RigidBody2D node (right click node -> change type)", Scene
"Add a Sprite2D as a child of 'SlicedVegetable'", Scene
"Add a CollisionShape2D as a child of 'SlicedVegetable'", Scene
"Give it a circular shape", Inspector

Implement Vegetable Logic, description
"Open the vegetable scene", FileSystem
"Attach a new script to the 'Vegetable' root node and name it 'vegetable.gd'", Scene
"Save the script in the 'scripts' folder", FileSystem
"Copy the code in the dock and paste it in 'vegetable.gd'", Scene
```gdscript
# scripts/vegetable.gd
extends RigidBody2D

# Define signals the vegetable can send
signal sliced
signal missed

# Variables to easily change each vegetable in the editor
@export var vegetable_name = "carrot"
@export var points = 10

# Preload the scene for the pieces that will spawn when sliced
var SlicedVegetable = preload("res://scenes/sliced_vegetable.tscn")

@onready var notifier = $VisibleOnScreenNotifier2D

func _ready():
	# Set the texture based on the vegetable_name
	$Sprite2D.texture = load("res://assets/%s.png" % vegetable_name)
	# Connect the notifier's signal to a function in this script
	notifier.screen_exited.connect(_on_screen_exited)

func slice():
	# Prevent a vegetable from being both "missed" and "sliced"
	notifier.screen_exited.disconnect(_on_screen_exited)
	emit_signal("sliced", points)
	create_sliced_piece(-1) # Left half
	create_sliced_piece(1)  # Right half
	queue_free()

func create_sliced_piece(direction: int):
	var piece = SlicedVegetable.instantiate()
	get_parent().add_child(piece)
	# Assumes your sliced asset files are named like 'carrot-half_1.png'
	var piece_texture_path = "res://assets/%s-half_%d.png" % [vegetable_name, 1 if direction == -1 else 2]
	piece.get_node("Sprite2D").texture = load(piece_texture_path)
	piece.global_position = global_position
	piece.rotation = rotation
	var impulse_strength = 200
	var impulse_vector = Vector2(impulse_strength * direction, -impulse_strength / 2).rotated(rotation)
	piece.apply_central_impulse(impulse_vector)

# This function is called when the vegetable leaves the screen
func _on_screen_exited():
	emit_signal("missed")
	queue_free() # Clean up the missed vegetable
```

Create the Main Game Scene, description
"Create a New Scene named 'main.tscn'", FileSystem
"Add a Timer child node, name it 'SpawnTimer'", Scene
"Set its 'Autostart' property to on", Inspector
"Add a Line2D node as a child of the Main node (for the swipe trail)", Scene
"Go to Project -> Project Settings -> Application -> Run and set 'Main Scene' to 'main.tscn'", Scene
"Attach a new script called 'main.gd' to the 'Main' node", Scene
"Put it in the scripts folder", FileSystem
"Copy the code in the dock and paste it in 'main.gd'", Scene
```gdscript
# scripts/main.gd
extends Node2D

var VegetableScene = preload("res://scenes/vegetable.tscn")
var GameOverScreen = preload("res://scenes/game_over_screen.tscn") # We will create this later

var score = 0
var missed_vegetables = 0
const MAX_MISSES = 3

var is_swiping = false
var swipe_points = []

@onready var spawn_timer = $SpawnTimer
@onready var swipe_trail = $Line2D
@onready var score_label = $Ui/ScoreLabel # From the Ui scene we'll add
@onready var misses_label = $Ui/MissesLabel # From the Ui scene we'll add

func _ready():
	spawn_timer.timeout.connect(_on_spawn_timer_timeout)
	update_score(0)
	update_misses()

func _process(delta):
	if is_swiping:
		swipe_trail.add_point(get_global_mouse_position())
	elif swipe_trail.get_point_count() > 0:
		swipe_trail.clear_points()

func _input(event):
	if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_LEFT:
		is_swiping = event.pressed
		if not is_swiping:
			swipe_points.clear()

	if event is InputEventMouseMotion and is_swiping:
		swipe_points.append(event.position)
		if swipe_points.size() > 20:
			swipe_points.pop_front()
		detect_slice()

func detect_slice():
	if swipe_points.size() < 2:
		return
	var space_state = get_world_2d().direct_space_state
	var query = PhysicsRayQueryParameters2D.create(swipe_points[0], swipe_points[-1])
	query.collide_with_areas = true
	query.collide_with_bodies = false
	var result = space_state.intersect_ray(query)
	if result and result.collider.get_parent().is_in_group("vegetables"):
		result.collider.get_parent().slice()

func _on_spawn_timer_timeout():
	var screen_size = get_viewport_rect().size
	var spawn_pos = Vector2(randf_range(0, screen_size.x), screen_size.y + 100)
	var vegetable = VegetableScene.instantiate()
	vegetable.sliced.connect(_on_vegetable_sliced)
	vegetable.missed.connect(_on_vegetable_missed)
	vegetable.position = spawn_pos
	add_child(vegetable)
	var impulse_x = randf_range(-150, 150)
	var impulse_y = randf_range(-800, -1000)
	vegetable.apply_central_impulse(Vector2(impulse_x, impulse_y))
	vegetable.apply_torque_impulse(randf_range(-200, 200))

func _on_vegetable_sliced(points):
	update_score(points)

func _on_vegetable_missed():
	missed_vegetables += 1
	update_misses()
	if missed_vegetables >= MAX_MISSES:
		game_over()

func update_score(points_to_add):
	score += points_to_add
	score_label.text = "Score: " + str(score)

func update_misses():
	misses_label.text = "Misses: %d / %d" % [missed_vegetables, MAX_MISSES]

func game_over():
	get_tree().paused = true
	var game_over_instance = GameOverScreen.instantiate()
	add_child(game_over_instance)
	game_over_instance.show_final_score(score)

```

Create the User Interface (UI), description
"Create a New Scene called 'ui.tscn'", FileSystem
"Swape the root node to a CanvasLayer node (right click node -> change type)", Scene
"Add a Label child node and name it 'ScoreLabel'", Scene
"Add another Label child node and name it 'MissesLabel'", Scene
"Open the 2D view", 2D
"Position the labels on the screen, for example in the top corners", Scene
"Open the 'main.tscn' scene", FileSystem
"Instanciate the 'ui.tscn' scene as a child of the 'Main' node (drag and drop the ui.tscn in the Main node)", Scene

Create the Game Over Screen, description
"Create a New Scene called 'game_over_screen", FileSystem
"Swape the root node to a CanvasLayer node (right click node -> change type)", Scene
"Go to the Inspector -> Process -> Mode, and set it to 'Always'", Inspector
"Add a ColorRect child", Scene
"Set it to 'Full Rect' in the Inspector -> Layout menu", Inspector
"Add a Label child for the 'Game Over' text", Scene
"Write the text 'Game Over' in the label", Inspector
"Add a Label child named 'FinalScoreLabel'", Scene
"Change font color to black for FInalScoreLabel", Inspector
"Change GameOverLabel font color to red (255, 0, 0)", Inspector
"Add a Button child named 'RestartButton'", Scene
"Add the text 'Restart' on the RestartButton", Inspector
"Attach a new script to the 'GameOverScreen' node and name it 'game_over_screen.gd'", Scene
"Copy the code in the dock and paste it in 'game_over_screen.gd'", Scene
```gdscript
# scripts/game_over_screen.gd
extends CanvasLayer

@onready var final_score_label = $FinalScoreLabel
@onready var restart_button = $RestartButton

func _ready():
	restart_button.pressed.connect(_on_restart_button_pressed)

func show_final_score(score: int):
	final_score_label.text = "Final Score: " + str(score)

func _on_restart_button_pressed():
	# Unpause the game so the new scene can run correctly
	get_tree().paused = false
	# Reload the entire main game scene to start over
	get_tree().change_scene_to_file("res://scenes/main.tscn")
```
